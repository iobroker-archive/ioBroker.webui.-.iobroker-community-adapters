import { BindingMode, BindingTarget, PropertiesHelper } from "@node-projects/web-component-designer";
export class VisualizationBindingsService {
    constructor(bindingsHelper) {
        this._bindingsHelper = bindingsHelper;
    }
    _bindingsHelper;
    static type = 'visualization-binding';
    getBindings(designItem) {
        const iobBindings = Array.from(this._bindingsHelper.getBindings(designItem.element));
        return iobBindings.map(x => ({
            targetName: (x[1].target === BindingTarget.css || x[1].target === BindingTarget.attribute) ? PropertiesHelper.camelToDashCase(x[0]) : x[0],
            target: x[1].target,
            mode: x[1].twoWay ? BindingMode.twoWay : BindingMode.oneWay,
            invert: x[1].inverted,
            bindableObjectNames: x[1].signal.split(';'),
            expression: x[1].expression,
            expressionTwoWay: x[1].expressionTwoWay,
            converter: x[1].converter,
            //type: x[1].type,
            type: VisualizationBindingsService.type,
            service: this,
            changedEvents: x[1].events,
            historic: x[1].historic,
            writeBackSignal: x[1].writeBackSignal,
        }));
    }
    setBinding(designItem, binding) {
        let bnd = { signal: binding.bindableObjectNames.join(';'), target: binding.target };
        bnd.inverted = binding.invert;
        bnd.twoWay = binding.mode == BindingMode.twoWay;
        bnd.expression = binding.expression;
        bnd.expressionTwoWay = binding.expressionTwoWay;
        //@ts-ignore
        bnd.historic = binding.historic;
        bnd.type = binding.type;
        bnd.converter = binding.converters;
        bnd.target = binding.target;
        bnd.events = binding.changedEvents;
        let serializedBnd = this._bindingsHelper.serializeBinding(designItem.element, binding.targetName, bnd);
        let group = designItem.openGroup('edit_binding');
        designItem.setAttribute(serializedBnd[0], serializedBnd[1]);
        group.commit();
        return true;
    }
    clearBinding(designItem, propertyName, propertyTarget) {
        const name = this._bindingsHelper.getBindingAttributeName(designItem.element, propertyName, propertyTarget);
        designItem.removeAttribute(name);
        return true;
    }
}
